{"version":3,"sources":["img/profilepic.png","components/Header.js","components/Footer.js","components/Home.js","components/Experience.js","components/Projects.js","components/Contact.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","navBarStyle","makeStyles","navBar","display","flexDirection","flexWrap","justifyContent","link","flex","textDecoration","width","height","button","borderRadius","imgBlock","textAlign","backgroundColor","img","verticalAlign","Header","classes","className","src","profilepic","AppBar","position","to","Button","variant","color","Footer","Home","Experience","Projects","Contact","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,wC,sMCOrCC,EAAcC,YAAW,CAC3BC,OAAQ,CACJC,QAAS,OACTC,cAAe,MACfC,SAAU,OACVC,eAAgB,UAEpBC,KAAM,CACFC,KAAM,EACNC,eAAgB,OAChBC,MAAO,MACPC,OAAQ,QAEZC,OAAQ,CACJF,MAAO,OACPC,OAAQ,OACRE,aAAc,MAElBC,SAAU,CACNC,UAAW,SACXC,gBAAiB,WAErBC,IAAK,CACDC,cAAe,SACfR,MAAO,WAsCAS,EAlCA,WACX,IAAMC,EAAUpB,IAChB,OACI,2BACI,uBAAKqB,UAAWD,EAAQN,UACpB,uBAAKO,UAAWD,EAAQH,IAAKK,IAAKC,OAGtC,gBAACC,EAAA,EAAD,CAAQH,UAAWD,EAAQlB,OAAQuB,SAAS,UACxC,gBAAC,IAAD,CAAMJ,UAAWD,EAAQb,KAAMmB,GAAG,KAC9B,gBAACC,EAAA,EAAD,CAAQN,UAAWD,EAAQR,OAAQgB,QAAQ,YAAYC,MAAM,WAA7D,SAIJ,gBAAC,IAAD,CAAMR,UAAWD,EAAQb,KAAMmB,GAAG,eAC9B,gBAACC,EAAA,EAAD,CAAQN,UAAWD,EAAQR,OAAQgB,QAAQ,YAAYC,MAAM,WAA7D,eAIJ,gBAAC,IAAD,CAAMR,UAAWD,EAAQb,KAAMmB,GAAG,aAC9B,gBAACC,EAAA,EAAD,CAAQN,UAAWD,EAAQR,OAAQgB,QAAQ,YAAYC,MAAM,WAA7D,aAIJ,gBAAC,IAAD,CAAMR,UAAWD,EAAQb,KAAMmB,GAAG,YAC9B,gBAACC,EAAA,EAAD,CAAQN,UAAWD,EAAQR,OAAQgB,QAAQ,YAAYC,MAAM,WAA7D,eCpDLC,EANA,WACX,OACI,4CCIOC,EANF,WACT,OACI,0CCIOC,EANI,WACf,OACI,gDCIOC,EANE,WACb,OACI,8CCIOC,EANC,WACZ,OACI,6CCkBOC,MAbf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWP,IACjC,kBAAC,IAAD,CAAOM,KAAK,cAAcC,UAAWN,IACrC,kBAAC,IAAD,CAAOK,KAAK,YAAYC,UAAWL,IACnC,kBAAC,IAAD,CAAOI,KAAK,WAAWC,UAAWJ,IAClC,kBAAC,EAAD,QCLcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.66452857.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profilepic.df648620.png\";","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Button from '@material-ui/core/Button';\r\nimport profilepic from '../img/profilepic.png';\r\n\r\nconst navBarStyle = makeStyles({\r\n    navBar: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'center',\r\n    },\r\n    link: {\r\n        flex: 1,\r\n        textDecoration: 'none',\r\n        width: '15%',\r\n        height: '50px',\r\n    },\r\n    button: {\r\n        width: '100%',\r\n        height: '100%',\r\n        borderRadius: '0%',\r\n    },\r\n    imgBlock: {\r\n        textAlign: 'center',\r\n        backgroundColor: '#000000'\r\n    },\r\n    img: {\r\n        verticalAlign: 'bottom',\r\n        width: '200px',\r\n    }\r\n});\r\n\r\nconst Header = () => {\r\n    const classes = navBarStyle();\r\n    return (\r\n        <div>\r\n            <div className={classes.imgBlock}>\r\n                <img className={classes.img} src={profilepic} />\r\n            </div>\r\n\r\n            <AppBar className={classes.navBar} position=\"static\">\r\n                <Link className={classes.link} to=\"/\">\r\n                    <Button className={classes.button} variant=\"contained\" color=\"primary\">\r\n                        Home\r\n                    </Button>\r\n                </Link>\r\n                <Link className={classes.link} to=\"/experience\">\r\n                    <Button className={classes.button} variant=\"contained\" color=\"primary\">\r\n                        Experience\r\n                    </Button>\r\n                </Link>\r\n                <Link className={classes.link} to=\"/projects\">\r\n                    <Button className={classes.button} variant=\"contained\" color=\"primary\">\r\n                        Projects\r\n                    </Button>\r\n                </Link>\r\n                <Link className={classes.link} to=\"/contact\">\r\n                    <Button className={classes.button} variant=\"contained\" color=\"primary\">\r\n                        Contact\r\n                    </Button>\r\n                </Link>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import * as React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <p>this is footer</p>\r\n    );\r\n}\r\n\r\nexport default Footer;","import * as React from 'react';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <p>this is Home</p>\r\n    );\r\n}\r\n\r\nexport default Home;","import * as React from 'react';\r\n\r\nconst Experience = () => {\r\n    return (\r\n        <p>this is Experience</p>\r\n    );\r\n}\r\n\r\nexport default Experience;","import * as React from 'react';\r\n\r\nconst Projects = () => {\r\n    return (\r\n        <p>this is Projects</p>\r\n    );\r\n}\r\n\r\nexport default Projects;","import * as React from 'react';\r\n\r\nconst Contact = () => {\r\n    return (\r\n        <p>this is contact</p>\r\n    );\r\n}\r\n\r\nexport default Contact;","import React from 'react';\nimport { BrowserRouter as Router, HashRouter, Route} from 'react-router-dom';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Home from './components/Home';\nimport Experience from './components/Experience';\nimport Projects from './components/Projects';\nimport Contact from './components/Contact';\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Header/>\n      <Route exact path='/' component={Home} />\n      <Route path='/experience' component={Experience} />\n      <Route path='/projects' component={Projects} />\n      <Route path='/contact' component={Contact} />\n      <Footer/>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}